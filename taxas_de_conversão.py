# -*- coding: utf-8 -*-
"""taxas_de_conversão

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PAf0IiR5dS7L7Djsn_nT65Gu9nExEXwt
"""

import matplotlib.pyplot as plt

import pandas as pd
df = pd.DataFrame({
    'Grupo': ['A'] * 1000 + ['B'] * 1000,
    'Clique': [1]*120 + [0]*880 + [1]*160 + [0]*840
})

taxa_a = 120/1000 # 12%
taxa_b = 160/1000 # 16%

grupos = ['Botão azul (A)', 'Botão verde(B)']
taxas = [taxa_a, taxa_b]

plt.bar(grupos, taxas, color=['blue', 'green'])
plt.ylabel('Taxa conversão')
plt.title('Comparação de Conversão A/B')
plt.ylim(0, 0.2)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

"""Gráfico de dispersão com Seaborn

Esses gráficos ajudam a visualizar a diferença entre os grupos e reforçam a análise estatística.

"""

import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import sem, t

import pandas as pd
df = pd.DataFrame({
    'Grupo': ['A'] * 1000 + ['B'] * 1000,
    'Clique': [1]*120 + [0]*880 + [1]*160 + [0]*840
})

# Dados simulados
cliques = np.array([120, 160])
visitas = np.array([1000, 1000])
grupos = ['Botão Azul (A)', 'Botão Verde (B)']

# Taxas de conversão
taxas = cliques / visitas

# Intervalo de confiança (95%)
n = visitas
erro_padrao = sem([1]*cliques[0] + [0]*(visitas[0]-cliques[0])), sem([1]*cliques[1] + [0]*(visitas[1]-cliques[1]))
t_score = t.ppf(0.975, n[0] - 1)
margem_erro = np.array(erro_padrao) * t_score

# Gráfico
fig, ax = plt.subplots()
barras = ax.bar(grupos, taxas, yerr=margem_erro, capsize=10, color=['blue', 'green'])

# Rótulos
ax.set_title('Taxa de Conversão com Intervalo de Confiança (95%)')
ax.set_ylabel('Taxa Média de Cliques')
ax.set_ylim(0, 0.2)

# Anotações nas barras
for barra, taxa in zip(barras, taxas):
    altura = barra.get_height()
    ax.text(barra.get_x() + barra.get_width()/2, altura + 0.005, f'{taxa:.2%}', ha='center', fontsize=10)

plt.grid(axis='y', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()